function startUpdate() {
  // Update all standard fields with template data
  <% @issue_template.attributes.each do |attr_name, attr_value|  %>
  $.each($('#issue-form').serializeArray(), function(i, field) {
    if (field.name == "<%= escape_javascript("issue[#{attr_name}]") %>"){
      $('[name="' + field.name + '"]').val("<%= raw(escape_javascript(attr_value.to_s)) %>");
    }
  });
  <% end %>

  // Show or hide some fields based on the new selected tracker, project or status, then update custom fields
  updateForm("<%= escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js') %>").done(updateCustomFieldsValues);
}

function updateForm(url) {
  return $.ajax({
    url: url,
    type: 'post',
    data: $('#issue-form').serialize()
  });
}

function updateCustomFieldsValues(data) {

  // Update all custom fields with template data
  <% @issue_template.editable_custom_field_values.each do |custom_value|  %>
  $.each($('#issue-form').serializeArray(), function(i, field) {
    if (field.name == "<%= "issue[custom_field_values][#{custom_value.custom_field_id}]" %>"){
      $('[name="' + field.name + '"]').val("<%= custom_value.value %>");
      <% unless custom_value.value.to_a %>
        $('[name="' + field.name + '"]').prop('checked', <%= custom_value.value.to_i > 0 ? 'true' : 'false' %>);
      <% end %>
    }
  });
  <% end %>

  // Reset select box and tracker after applying a template
  resetTemplateSelectBox();
  $('#track_changes').val('false');
  $('#issue-form :input').change(function(){
    $('#track_changes').val('true');
  });

  // Notice the user after applying a template
  var $notice = $('<div class="flash notice" id="flash_notice"><%= l("template_has_been_applied", :name => @issue_template.template_title) %></div>').fadeIn(200);
  $notice.insertBefore( ".box" );
  $notice.delay(3000).fadeOut(300);

  $('#issue_subject').focus();
}

function resetTemplateSelectBox() {
  $('#select_issue_template')[0].selectedIndex = 0;
}
